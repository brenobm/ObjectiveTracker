@page "/objectives/{id}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using ObjectivesTracker.Models
@using System.Net.Http.Headers
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IAccessTokenProvider AccessTokenProvider
@attribute [Authorize]

@if (objective == null)
{
    <p>Loading objective...</p>
}
else
{
    <h3>Objective Details</h3>

    <div class="card">
        <div class="card-body">
            <h5 class="card-title">@objective.Name</h5>
            <p class="card-text">@objective.Description</p>

            <p class="card-text">Frequency: @objective.Frequency.Type.ToString()</p>
            @if (objective.Frequency.Type == FrequencyType.Weekly || objective.Frequency.Type == FrequencyType.Monthly)
            {
                <p class="card-text">Days: @string.Join(", ", objective.Frequency.Days)</p>
            }

            <div class="mt-3">
                <button class="btn btn-primary me-2" @onclick="() => EditObjective(objective.Id)">Edit</button>
                <button class="btn btn-danger" @onclick="DeleteObjective">Delete</button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string id { get; set; } = "";

    private Objective objective;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var tokenResult = await AccessTokenProvider.RequestAccessToken();

            if (tokenResult.TryGetToken(out var token))
            {
                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.Value);
            }

            objective = await Http.GetFromJsonAsync<Objective>($"api/objectives/{id}");
        }
        catch (HttpRequestException ex)
        {
            // Handle API request error (e.g., not found, server error)
            // Display an error message to the user
            Console.WriteLine($"Error fetching objective: {ex.Message}");
        }
    }

    private void EditObjective(string objectiveId)
    {
        NavigationManager.NavigateTo($"/objectives/edit/{objectiveId}");
    }

    private async Task DeleteObjective()
    {
        var confirmResult = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Are you sure you want to delete this objective?" });
        if (confirmResult)
        {
            var tokenResult = await AccessTokenProvider.RequestAccessToken();

            if (tokenResult.TryGetToken(out var token))
            {
                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.Value);
            }

            await Http.DeleteAsync($"api/objectives/{id}");
            NavigationManager.NavigateTo("/");
        }
    }
}